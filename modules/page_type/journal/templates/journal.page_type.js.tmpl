(function() {
	function JournalController(page_id, container, page_type) {
		this.container = container;
		this.page_type = page_type;
	}
	
	jQuery.extend(JournalController.prototype, {
		init: function() {
			var _this = this;
			
			this.form = jQuery('<form/>').append(Widget.parseHTML('{{includeTemplate=edit}}'));
			this.journal_checkbox_prototype = Widget.parseHTML('{{includeTemplate=edit_journal}}');
			this.container.append(this.form);
			this.journal_list = this.form.find('div.journal_list');
			this.add_new_journal_button = this.form.find('a.add_new_journal').click(function() {
				_this.edit_journal();
			});

			this.page_type.methods.detailWidget(function(session) {
				Widget.create('journal_entry_detail', function(detail) {
					_this.journal_entry_detail = detail;
					_this.journal_entry_detail.save_callback = _this.reload_entries.bind(_this);
					_this.journal_list.ensureWidget(function(journal_input) {
						_this.journal_entry_detail.journal_ids_configured(journal_input.val() || []);
					});
				}, jQuery.noop, session);
			});
			
			// Lists to be filled
			this.container.find('span.edit_journal_button').click(function() {
				_this.edit_journal();
			});
			
			this.template_list = this.container.find('select[name="template_set"]');
			this.widget_list = this.container.find('div.journal-widgets');
			this.widget_list.sortable({
				handle: '.ui-sortable-handle',
				axis: 'y'
			});
			this.container_list = this.container.find('select[name="container"]');
			this.auxiliary_container_list = this.container.find('select[name="auxiliary_container"]');
			
			// Elements used later on
			this.entry_area = this.container.find('div.journal-entries');
			this.name_input = this.container.find('input[name="journal_name"]');
			this.description_input = this.container.find('textarea[name="journal_description"]');
			this.date_navigation_items_visible = this.container.find('select[name="date_navigation_items_visible"]');
			this.add_journal_entry_button = this.container.find('a.add_journal_entry').click(this.add_journal_entry.bind(this)).hide();
			
			//Static value lists
			this.mode_list = this.container.find('select[name="mode"]');
			this.entries_per_page_list = this.container.find('select[name="entries_per_page"]');

			this.reload();
		},
		
		journal_ids: function() {
			this.journal_list.find('input[name="journal_ids[]"]').each(function() {
				result.push(jQuery(this).val());
			});
			return result;
		},
		
		set_journal_ids: function(values) {
			this.journal_list.find('input[name="journal_ids[]"]').each(function() {
				var journal_input = jQuery(this);
				journal_input.prop('checked', jQuery.inArray(journal_input.val(), values) != -1);
			});
		},
		
		reload: function() {
			var _this = this;
			var waiters = [];
			
			this.container.find('.journal_detail').tabs();
			
			// List journals
			this.update_journals(waiters);

			// List templates
			this.page_type.methods.listTemplateSets(function(result) {
				_this.template_list.empty().populate(result.options, result.current);
			}.deferred(waiters));
			
			// List widgets
			this.page_type.methods.listWidgets(function(result) {
				_this.widget_list.empty();
				var sortable_container = jQuery('<div/>').addClass('widget_item');
				jQuery.each(result, function(i, widget) {
					var container = sortable_container.clone();
					jQuery('<span/>', {className: 'ui-sortable-handle', style: 'display:inline-block;height:16px;'}).appendTo(container);
					jQuery('<input/>', {type: 'checkbox', name: 'widgets[]', value: widget.name, checked: widget.current}).appendTo(container);
					jQuery('<label/>', {"for": 'widgets[]'}).css({display: 'inline'}).appendTo(container).text(widget.title);
					container.appendTo(_this.widget_list);
				});
			}.deferred(waiters));

			// List containers
			this.page_type.methods.listContainers(function(result) {
				_this.container_list.empty().populate(result.options, result.current);
				_this.auxiliary_container_list.empty().populate(result.options, result.current_auxiliary);
			}.deferred(waiters));
			
			// List overview modes
			this.page_type.methods.currentOverviewMode(function(result) {
				_this.mode_list.val(result);
			}.deferred(waiters));
			
			// Further settings
			this.page_type.methods.dateNavigationItemsVisible(function(hidden) {
				_this.date_navigation_items_visible.val(hidden === false ? '0' : '1');
			}.deferred(waiters));
			
			this.page_type.methods.currentEntriesPerPage(function(result) {
				_this.entries_per_page_list.val(result);
			}.deferred(waiters));

			jQuery.when.apply(jQuery, waiters).then(function() {
				_this.reload_entries();
			});
		},
		
		update_journals:function(waiters) {
			var _this = this;
			this.journal_ids = null;
			this.page_type.methods.currentJournalIds(function(journal_ids) {
				_this.journal_ids = journal_ids;
				_this.set_journal_ids(journal_ids);
				_this.journal_entry_detail && _this.journal_entry_detail.journal_ids_configured(journal_ids || []);
				_this.add_journal_entry_button.show();
			});
			// List journals
			this.page_type.methods.listJournals(function(result) {
				_this.journal_list.empty();
				jQuery.each(result, function(id, name) {
					_this.add_journal_input(id, name);
				});
				if(_this.journal_ids) {
					_this.set_journal_ids(_this.journal_ids);
				}
			}.deferred(waiters));
		},
		
		add_journal_input: function(id, name) {
			var _this = this;
			var journal_input = this.journal_checkbox_prototype.clone();
			journal_input.find('input[type="checkbox"]').val(id);
			journal_input.find('label').text(name);
			journal_input.find('span.edit_journal_button').click(function() {
				_this.edit_journal(id);
			});
			this.journal_list.append(journal_input);
		},

		add_journal_entry: function() {
			var _this = this;
			Widget.create('journal_entry_detail', function(widget) {
				widget.open();
				widget.save_callback = function() {
					_this.reload_entries();
				};
			});
			return false;
		},
		
		edit_journal: function(journal_id) {
			var _this = this;
			Widget.createOnce('journal_detail', function(widget) {
				if(journal_id) {
					widget.setJournalId(journal_id);
					widget.fill_data();
				}
				widget.open();
			}, function(widget) {
				widget.save_callback = function(journal_id) {
					Widget.fire('rapila-journals_changed');
					_this.update_journals();
				};
			}, null, journal_id ? null : [this, 'new_journal_detail_instance']);
		},
		
		journal_changed: function() {
			var _this = this;
			var value = this.journal_ids() || [];
			_this.journal_entry_detail && _this.journal_entry_detail.journal_ids_configured(value);
			this.page_type.methods.setCurrentJournal(value, function() {
				_this.reload_entries();
			});
		},

		reload_entries: function() {
			// just remove html code for entry_area in order not to display the entries (tab)
			if(this.entry_area.length == 0) {
				// return;
			}
			var _this = this;
			if(this.entry_list) {
				this.entry_list.reload();
			} else {
				if(!this.journal_entry_detail) {
					return window.setTimeout(arguments.callee.bind(this), 500);
				}
				this.page_type.methods.entryList(function(list) {
					_this.entry_area.html(list);
					_this.entry_area.widgetElements().prepareWidget(function(widget) {
						widget.connected_detail = _this.journal_entry_detail;
					}, function(widget) {
						_this.entry_list = widget;
					});
				});
			}
		},

		save: function() {
			var _this = this;
			this.page_type.methods.saveJournalPageConfiguration(this.form.serializeArrayKV(), function(result, error) {
				if(error) {
					if(error.exception_type === 'ValidationException') {
						Widget.callStatic('detail', 'validate_with', error.parameters, _this.form);
					} else {
						Widget.notifyUser(Widget.logSeverity.ALERT, error.message);
					}
				} else {
					_this.reload();
				}
			});
		}
	});
	
	var init_journal_controls = function(page_id, container, page_type) {
		var controller = new JournalController(page_id, container, page_type);
		controller.init();
		return controller;
	};
	
	Widget.types.page_type.types.journal = function(page_type, page_id, container) {
		this.controller = null;
	};

	jQuery.extend(Widget.types.page_type.types.journal.prototype, {
		handle_preview: function(page_id, page_type) {
			var _this = this;

			function insert_preview_bars(context) {
				(jQuery('.journal_entry-container')||context).each(function() {
					var container = jQuery(this);
				
					// Append the preview bar, add container info
					var preview_bar = Widget.parseHTML('{{includeTemplate=preview_bar}}');
					container.find('h1, h2, h3, > :first-child').last().prepend(preview_bar);
				});
				
			}
			
			// Add add button for new journal entry
			var list = jQuery('.journal_list-container');
			list.each(function() {
				var addButton = list.find('button.add-entry').button({
					icons: {primary: 'ui-icon-plusthick'},
					text: false
				});
				var journalList = addButton.next('ul.menu').menu().hide();
				addButton.click(function() {
					journalList.show().position({
						my: "left top",
						at: "left bottom",
						of: this
					});
					jQuery(document).one("click", function() {
						journalList.hide();
					});
					return false;
				});
				journalList.on('menuselect', function(event, ui) {
					console.log(ui.item.data('journalId'));
				});
			});
			
			// Add preview edit buttons
			insert_preview_bars();
			
			// add edit buttons click handlers
			jQuery(document).on('click', '.preview_bar.journal-entry.may_edit .edit', function() {
				var preview_bar = jQuery(this).closest('.preview_bar');
				var container = preview_bar.closest('.journal_entry-container');

				Widget.createOnce('journal_entry_detail', function(widget) {
					var entry_id = container.data('entryId');
					widget.setJournalEntryId(entry_id);
					widget.fill_data();
					widget.open();
					widget.handle('saved', function() {
						page_type.callPageTypeMethod('renderJournalEntry', entry_id, container.data('template'), function(data) {
							container.html(data);
							insert_preview_bar(preview_bar, container);
						});
					});
				}, null, null, _this);
			});
		},

		handle_admin: function(page_id, container, page_type) {
			this.controller = init_journal_controls(page_id, container, page_type);
		},

		did_save: function(page_id, container, page_type) {
			this.controller.save();
		}
	});
})();
