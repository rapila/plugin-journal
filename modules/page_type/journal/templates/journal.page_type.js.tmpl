(function() {
	function JournalController(page_id, container, page_type) {
		this.page_id = page_id;
		this.container = container;
		this.page_type = page_type;
		page_type.callPageTypeMethod('detailWidget', function(session) {
			Widget.create('journal_entry_detail', function(detail) {
				this.journal_entry_detail = detail;
				detail.save_callback = this.reload_entries.bind(this);
			}.bind(this), jQuery.noop, session);
		}.bind(this));
	}
	jQuery.extend(JournalController.prototype, {
		init: function() {
			var _this = this;
			var waiters = [];
			
			this.form = jQuery('<form/>').append(jQuery.parseHTML('{{includeTemplate=edit}}'));
			this.container.append(this.form);
			//Lists to be filled
			this.journal_list = this.container.find('select[name="journal"]').bind('change', this.journal_changed.bind(this));
			this.template_list = this.container.find('select[name="template_set"]');
			this.container_list = this.container.find('select[name="container"]');
			//Static value lists
			this.mode_list = this.container.find('select[name="mode"]');
			this.comment_mode_list = this.container.find('select[name="comment_mode"]');
			//Elements used later on
			this.entry_list = this.container.find('ol.entries');
			this.name_input = this.container.find('input[name="journal_name"]');
			this.description_input = this.container.find('textarea[name="journal_description"]');
			this.add_journal_entry_button = this.container.find('button[name="add_journal_entry"]').hide().click(this.add_journal_entry.bind(this));

			this.page_type.callPageTypeMethod('listJournals', function(result) {
				_this.journal_list.populate(result.options, result.current || '');
			}.deferred(waiters));
			
			this.page_type.callPageTypeMethod('listTemplateSets', function(result) {
				_this.template_list.populate(result.options, result.current);
			}.deferred(waiters));

			this.page_type.callPageTypeMethod('listContainers', function(result) {
				_this.container_list.populate(result.options, result.current);
			}.deferred(waiters));
			
			this.page_type.callPageTypeMethod('currentMode', function(result) {
				_this.mode_list.val(result);
			}.deferred(waiters));
			
			this.page_type.callPageTypeMethod('currentCommentMode', function(result) {
				_this.comment_mode_list.val(result);
			}.deferred(waiters));

			this.container.find('.journal_detail').tabs();
			
			jQuery.when.apply(jQuery, waiters).then(function() {
				_this.reload();
			});
		},

		add_journal_entry: function() {
			var _this = this;
			this.page_type.callPageTypeMethod('currentJournal', function(id) {
				if(id && _this.journal_entry_detail) {
					_this.journal_entry_detail.setJournalId(id);
					_this.journal_entry_detail.setEntryId(null);
					_this.journal_entry_detail.fill_data();
					_this.journal_entry_detail.open();
				}
			});
			return false;
		},

		journal_changed: function() {
			var _this = this;
			var value = this.journal_list.val() ? this.journal_list.val() : null;
			this.page_type.callPageTypeMethod('setCurrentJournal', value, function() {
				_this.reload();
			});
		},

		reload: function() {
			var _this = this;
			this.page_type.callPageTypeMethod('journalProperties', function(result) {
				if(result) {
					_this.name_input.val(result.Name);
					_this.description_input.val(result.Description);
					_this.add_journal_entry_button.show();
				} else {
					_this.name_input.val('');
					_this.description_input.val('');
					_this.add_journal_entry_button.hide();
				}
			});
			
			this.reload_entries();
		},

		reload_entries: function() {
			var _this = this;
			this.page_type.callPageTypeMethod('listEntries', function(result) {
				_this.entry_list.empty();
				jQuery.each(result || [], function(i, entry) {
					var item = jQuery('<li/>');
					item.bind('click', function() {
						_this.journal_entry_detail.setEntryId(entry.Id);
						_this.journal_entry_detail.fill_data();
						_this.journal_entry_detail.open();
					});
					item.text(entry.Title);
					_this.entry_list.append(item);
				});
			});
		},

		save: function() {
			var _this = this;
			this.page_type.callPageTypeMethod('saveJournal', this.form.serializeArrayKV(), function() {
				_this.container.empty();
				_this.init();
			});
		}
	});
	
	Widget.types.page_type.types['journal'] = {
		handle_preview: function(page_id, page_type) {
			var container = jQuery('<div/>');
			var _this = this;
			var save = jQuery('<button/>').text(window.AdminInterface.translations.okButtonText).button();
			jQuery('#journal_contents').append(container, save);
			var controller = this.init_journal_controls(page_id, container, page_type);
			save.click(function() {
				controller.save();
			});
		},

		handle_admin: function(page_id, container, page_type) {
			this.init_journal_controls(page_id, container, page_type);
		},

		init_journal_controls: function(page_id, container, page_type) {
			var controller = new JournalController(page_id, container, page_type);
			container.data('journal-controller', controller);
			controller.init();
			return controller;
		},

		did_save: function(page_id, container, page_type) {
			var controller = container.data('journal-controller');
			controller.save();
		}
	};
})();
