(function() {
	function JournalController(page_id, container, page_type) {
		this.page_id = page_id;
		this.container = container;
		this.page_type = page_type;
		page_type.methods.detailWidget(function(session) {
			Widget.create('journal_entry_detail', function(detail) {
				this.journal_entry_detail = detail;
				detail.save_callback = this.reload_entries.bind(this);
			}.bind(this), jQuery.noop, session);
		}.bind(this));
	}
	jQuery.extend(JournalController.prototype, {
		init: function() {
			var _this = this;
			var waiters = [];
			
			this.form = jQuery('<form/>').append(jQuery.parseHTML('{{includeTemplate=edit}}'));
			this.container.append(this.form);
			//Lists to be filled
			this.journal_list = this.container.find('select[name="journal"]').bind('change', this.journal_changed.bind(this));
			this.template_list = this.container.find('select[name="template_set"]');
			this.widget_list = this.container.find('div.journal-widgets');
			this.widget_list.sortable({
				handle: '.ui-sortable-handle',
				axis: 'y'
			});
			this.container_list = this.container.find('select[name="container"]');
			this.auxiliary_container_list = this.container.find('select[name="auxiliary_container"]');
			//Static value lists
			this.mode_list = this.container.find('select[name="mode"]');
			this.comment_mode_list = this.container.find('select[name="comment_mode"]');
			this.entries_per_page_list = this.container.find('select[name="entries_per_page"]');
			//Elements used later on
			this.entry_area = this.container.find('div.journal-entries');
			this.name_input = this.container.find('input[name="journal_name"]');
			this.description_input = this.container.find('textarea[name="journal_description"]');
			this.dates_hidden_checkbox = this.container.find('input[name="dates_hidden"]');
			this.add_journal_entry_button = this.container.find('a.add_journal_entry').hide().click(this.add_journal_entry.bind(this));

			this.page_type.methods.listJournals(function(result) {
				_this.journal_list.populate(result.options, result.current || '');
			}.deferred(waiters));
			
			this.page_type.methods.listTemplateSets(function(result) {
				_this.template_list.populate(result.options, result.current);
			}.deferred(waiters));
			
			this.page_type.methods.listWidgets(function(result) {
				var sortable_container = jQuery('<div/>').attr({ style: 'padding:1px;'});
				jQuery.each(result, function(i, widget) {
					var container = sortable_container.clone();
					jQuery('<span/>', {class: 'ui-sortable-handle', style: 'display:inline-block;height:16px;'}).appendTo(container);
					jQuery('<input/>', {type: 'checkbox', name: 'widgets[]', value: widget.name, checked: widget.current}).appendTo(container);
					jQuery('<label/>', {"for": 'widgets[]'}).css({display: 'inline'}).appendTo(container).text(widget.title);
					container.appendTo(_this.widget_list);
				});
			}.deferred(waiters));

			this.page_type.methods.listContainers(function(result) {
				_this.container_list.populate(result.options, result.current);
				_this.auxiliary_container_list.populate(result.options, result.current_auxiliary);
			}.deferred(waiters));
			
			this.page_type.methods.currentMode(function(result) {
				_this.mode_list.val(result);
			}.deferred(waiters));
			
			this.page_type.methods.datesHidden(function(hidden) {
				_this.dates_hidden_checkbox.attr('checked', hidden);
			}.deferred(waiters));
			
			this.page_type.methods.currentCommentMode(function(result) {
				_this.comment_mode_list.val(result);
			}.deferred(waiters));
			
			this.page_type.methods.currentEntriesPerPage(function(result) {
				_this.entries_per_page_list.val(result);
			}.deferred(waiters));

			this.container.find('.journal_detail').tabs();
			
			jQuery.when.apply(jQuery, waiters).then(function() {
				_this.reload();
			});
		},

		add_journal_entry: function() {
			var _this = this;
			this.page_type.methods.currentJournal(function(id) {
				if(id && _this.journal_entry_detail) {
					_this.journal_entry_detail.setJournalId(id);
					_this.journal_entry_detail.setJournalEntryId(null);
					_this.journal_entry_detail.fill_data();
					_this.journal_entry_detail.open();
				}
			});
			return false;
		},

		journal_changed: function() {
			var _this = this;
			var value = this.journal_list.val() ? this.journal_list.val() : null;
			this.page_type.methods.setCurrentJournal(value, function() {
				_this.reload();
			});
		},

		reload: function() {
			var _this = this;
			this.page_type.methods.journalProperties(function(result) {
				if(result) {
					_this.name_input.val(result.Name);
					_this.description_input.val(result.Description);
					_this.add_journal_entry_button.show();
				} else {
					_this.name_input.val('');
					_this.description_input.val('');
					_this.add_journal_entry_button.hide();
				}
			});
			
			this.reload_entries();
		},

		reload_entries: function() {
			var _this = this;
			if(this.entry_list) {
				this.entry_list.reload();
			} else {
				if(!this.journal_entry_detail) {
					return window.setTimeout(arguments.callee.bind(this), 500);
				}
				this.page_type.methods.entryList(function(list) {
					_this.entry_area.html(list);
					_this.entry_area.widgetElements().prepareWidget(function(widget) {
						widget.connected_detail = _this.journal_entry_detail;
					}, function(widget) {
						_this.entry_list = widget;
					});
				});
			}
		},

		save: function() {
			var _this = this;
			this.page_type.methods.saveJournal(this.form.serializeArrayKV(), function(result, error) {
				if(error) {
					if(error.exception_type === 'ValidationException') {
						Widget.callStatic('detail', 'validate_with', error.parameters, _this.form);
					} else {
						Widget.notifyUser(Widget.logSeverity.ALERT, error.message);
					}
				} else {
					_this.container.empty();
					_this.init();
				}
			});
		}
	});
	
	var init_journal_controls = function(page_id, container, page_type) {
		var controller = new JournalController(page_id, container, page_type);
		controller.init();
		return controller;
	};
	
	Widget.types.page_type.types.journal = function(page_type, page_id, container) {
		this.controller = null;
	};

	jQuery.extend(Widget.types.page_type.types.journal.prototype, {
		handle_preview: function(page_id, page_type) {
			var container = jQuery('<div/>');
			var _this = this;
			var save = jQuery('<button/>').text(window.AdminInterface.translations.okButtonText).button();
			jQuery('#journal_contents').append(container, save);
			this.controller = init_journal_controls(page_id, container, page_type);
			save.click(function() {
				_this.controller.save();
			});
		},

		handle_admin: function(page_id, container, page_type) {
			this.controller = init_journal_controls(page_id, container, page_type);
		},


		did_save: function(page_id, container, page_type) {
			this.controller.save();
		}
	});
})();
